{"version":3,"sources":["components/Navbar.js","components/ToDoList.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","this","props","account","React","Component","ToDoList","_this","onSubmit","event","preventDefault","onClick","newTask","value","type","ref","input","placeholder","tasks","map","task","key","id","checkboxOnClick","toNumber","content","tasksCompleted","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","loading","loadWeb3","loadBlockchainData","loadContract","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","setState","net","getId","networkId","networkData","ToDo","networks","toDo","Contract","abi","address","refreshPage","loadTasksCompleted","methods","createNewTask","send","from","e","_this2","checkBlockTime","sleep","milliseconds","Promise","resolve","setTimeout","getBlockNumber","blockNumberBefore","blockNumberNow","completed","finishTask","_this3","toDoCount","i","concat","toConsumableArray","components_Navbar","components_ToDoList","bind","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9eff2207.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n//Main navbar\r\n\r\nclass Navbar extends React.Component{\r\n    render() {\r\n        return(\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                <div className=\"container\">\r\n                    <a className=\"navbar-brand\" href=\"#\">To-Do App</a>\r\n                    <span className=\"navbar-text\">\r\n                        Your account: {this.props.account} \r\n                    </span>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\nimport './App.css';\r\n\r\n//Listing to do items\r\n\r\nclass ToDoList extends React.Component {\r\n    render() {\r\n        return(\r\n            <span>\r\n                <div className=\"d-flex justify-content-center mt-5\">\r\n                    <form className=\"form-inline\" onSubmit = {(event) => {\r\n                            event.preventDefault(); //no refreshPage\r\n                            this.props.onClick(this.newTask.value); //catching value from input\r\n                        }}>\r\n                        <input type=\"text\" ref={(input) => this.newTask = input } className=\"form-control mr-2\" placeholder=\"Add To Do\" />\r\n                        <button type=\"submit\" className=\"btn btn-primary mb-2 mt-2\">Add to do</button>\r\n                    </form>\r\n                </div>\r\n                <div>\r\n                    <ul className=\"list-group d-flex  align-items-center mt-5\">\r\n                        <div className=\"list-group-item col-8 font-weight-bolder \">\r\n                            <li className=\"d-inline\"><h1 className=\"text-center\">Tasks To Do!</h1></li>\r\n                        </div>\r\n                        {this.props.tasks.map((task) => {\r\n                            return(\r\n                                <div className=\"list-group-item col-8 font-weight-bolder d-inline\" key={task.id}>\r\n                                <span onClick={(event) => {\r\n                                    this.props.checkboxOnClick(task.id.toNumber())\r\n                                }} className=\"mr-3 col-2 deleteSpan\">Delete</span>\r\n                                <li className=\"d-inline liSpan\">{task.content}</li>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                        </ul>\r\n                        <ul className=\"list-group d-flex  align-items-center mt-5\">\r\n                        <div className=\"list-group-item col-8 font-weight-bolder \">\r\n                        <li className=\"d-inline\"><h1 className=\"text-center\">Tasks already completed</h1></li>\r\n\r\n                        </div>\r\n\r\n                        {this.props.tasksCompleted.map((task) => {\r\n                            return(\r\n                                <div className=\"list-group-item col-8 font-weight-bolder \" key={task.id}>\r\n                                <li className=\"d-inline\">{task.content}</li>\r\n\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                 </div>\r\n\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ToDoList\r\n","import React, { Component } from 'react';\r\nimport Web3 from 'web3'\r\nimport './App.css';\r\nimport Navbar from \"./Navbar\";\r\nimport ToDoList from \"./ToDoList\";\r\nimport ToDo from '../abis/ToDo.json'\r\n\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3();\r\n    await this.loadBlockchainData();\r\n    await this.loadContract();\r\n  }\r\n  //loading web3 into website\r\n  loadWeb3() {\r\n    if(window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum, );\r\n      window.ethereum.enable();\r\n    } else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider);\r\n    } else {\r\n      alert(\"Cannot connect to blockchain\")\r\n    }\r\n  }\r\n\r\n\r\n  //loading accounts\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3;\r\n    const account = await web3.eth.getAccounts();\r\n    this.setState({account: account[0]});\r\n  }\r\n  //loading smart contract\r\n  async loadContract() {\r\n    const web3 = window.web3;\r\n    const networkId = await web3.eth.net.getId();\r\n    const networkData = ToDo.networks[networkId];\r\n    if(networkData) {\r\n      const toDo = web3.eth.Contract(ToDo.abi, networkData.address);\r\n      this.setState({toDo})\r\n      this.setState({toDo});\r\n      this.refreshPage();\r\n      this.loadTasksCompleted();\r\n      this.setState({loading: false})\r\n    } else {\r\n      alert(\"Cannot connect to network\")\r\n    }\r\n  }\r\n  //create new task dependencies\r\n  async createNewTask(newTask) {\r\n      this.setState({loading: true})\r\n      this.state.toDo.methods.createNewTask(newTask).send({from: this.state.account}, (e) => {\r\n      this.checkBlockTime();\r\n    })\r\n  }\r\n  //function that checks if block with transation is mined\r\n  async checkBlockTime() {\r\n      //sleep function\r\n    const sleep = (milliseconds) => {\r\n      return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n    };\r\n    // Checking that block is mined\r\n    const blockNumberBefore = await window.web3.eth.getBlockNumber();\r\n    let blockNumberNow = await window.web3.eth.getBlockNumber();\r\n    while(blockNumberBefore ===  blockNumberNow) {\r\n        blockNumberNow = await window.web3.eth.getBlockNumber();\r\n        await sleep(250);\r\n    }\r\n    this.setState({loading: false})\r\n    //load tasks again\r\n    this.refreshPage();\r\n    this.loadTasksCompleted();\r\n    }\r\n    //finishTask\r\n    async finishTask(id) {\r\n        this.setState({loading:true})\r\n        const task = await this.state.toDo.methods.tasks(id).call();\r\n        if(task.completed === false) {\r\n            this.state.toDo.methods.finishTask(id).send({from: this.state.account}, (e) => {\r\n                  this.checkBlockTime();\r\n              })\r\n\r\n         }\r\n    }\r\n    async refreshPage() {\r\n        this.setState({tasks: []});\r\n        const toDoCount = await this.state.toDo.methods.toDoCount().call();\r\n        for(let i=1; i<=toDoCount; i++) {\r\n            const task = await this.state.toDo.methods.tasks(i).call();\r\n            if(task.completed === false) {\r\n            this.setState({tasks : [...this.state.tasks, task]})\r\n            }\r\n        }\r\n    }\r\n\r\n     async loadTasksCompleted() {\r\n         this.setState({tasksCompleted: []});\r\n         const toDoCount = await this.state.toDo.methods.toDoCount().call();\r\n         for(let i=1; i<=toDoCount; i++) {\r\n             const task = await this.state.toDo.methods.tasks(i).call();\r\n             if(task.completed === true) {\r\n                 this.setState({tasksCompleted : [...this.state.tasksCompleted, task]})\r\n             }\r\n         }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: '',\r\n            tasks: [],\r\n            loading: true,\r\n            tasksCompleted: []\r\n\r\n        }\r\n    }\r\n\r\n  render() {\r\n      return(\r\n          <div>\r\n                <Navbar account={this.state.account}/>\r\n                {this.state.loading\r\n                ? <div className=\"container mt-5\"><h1 className=\"text-center\">Loading blockchain data...</h1></div>\r\n                : <ToDoList onClick={this.createNewTask.bind(this)} tasksCompleted={this.state.tasksCompleted} tasks = {this.state.tasks} checkboxOnClick={this.finishTask.bind(this)}/>\r\n                }\r\n\r\n           </div>\r\n    );\r\n   }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}